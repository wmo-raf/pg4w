server {
  # listen on the container's port 8001
  listen 80 default_server;
  client_body_buffer_size 100M;
  client_max_body_size 100M;

  resolver 127.0.0.11 valid=30s;

  location / {
    # Using a variable is a trick to let Nginx start even if upstream host is not up yet
    # (see https://sandro-keil.de/blog/2017/07/24/let-nginx-start-if-upstream-host-is-unavailable-or-down/)
    set $upstream pg_data_connector:8000;

    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_set_header X-NginX-Proxy true;

    proxy_pass http://$upstream/;
    proxy_redirect off;
  }

  location /featureserv/ {
    # Using a variable is a trick to let Nginx start even if upstream host is not up yet
    # (see https://sandro-keil.de/blog/2017/07/24/let-nginx-start-if-upstream-host-is-unavailable-or-down/)
    set $upstream pg_featureserv:9000;

    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_set_header X-NginX-Proxy true;

    proxy_pass http://$upstream/;
    proxy_redirect off;
  }

  location /tileserv/ {
       # Using a variable is a trick to let Nginx start even if upstream host is not up yet
    # (see https://sandro-keil.de/blog/2017/07/24/let-nginx-start-if-upstream-host-is-unavailable-or-down/)
    set $upstream pg_varnish:80;

    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_set_header X-NginX-Proxy true;

    proxy_pass http://$upstream/;
    proxy_redirect off;
  }
}